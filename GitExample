                let stringData = try String(contentsOf: pathway, encoding: .utf8)
                
                var parserStack: String = ""
                var step: Int = 0
                var prevStep: Int = 0
                
                let errorArr: [String] = ["Expecting a non-void name",//----------------------------| 0 |
                                          "Expecting an opening bracket before type",//-------------| 1 |
                                          "Expecting a non-void type",//----------------------------| 2 |
                                          "Expecting a closing bracket after type",//---------------| 3 |
                                          "Expecting an opening curly-bracket before portmap",//----| 4 |
                                          "Expecting a non-void portmap",//-------------------------| 5 |
                                          "Expecting a closing curly-bracket after portmap"]//------| 6 |
                
                var errorsDetected: [String] = []
                
                for char in stringData {
                    
                    while 1 == 1 {
                        
                        if char == " "       {break}
                        else if char == "\t" {break}
                        else if char == "\n" {break}
                        
                        prevStep = step
                        
                        if char == "[" {
                            
                            parserStack = ""
                            
                            if step == 1 {step += 1}
                            
                        }
                        else if char == "]" {
                            
                            if step == 3 {step += 1}
                            
                        }
                        else if char == "{" {
                            
                            parserStack = ""
                            
                            if step == 4 {step += 1}
                            
                        }
                        else if char == "}" {
                            
                            parserStack = ""
                            
                            if step == 6 {step += 1; break}
                            
                        }
                        else {
                            
                            if step == 0      {step += 1}
                            else if step == 2 {step += 1}
                            else if step == 5 {step += 1}
                            
                            parserStack += "\(char)"
                            
                        }
                        
                        if step == 7 {parserStack = ""; step = 0; print(errorsDetected); errorsDetected = []}
                        else if step == prevStep {errorsDetected.append(errorArr[step]); step += 1}
                        else {break}
                        
                    }
                    
                }
                
                if step != 7 && step != 1 {
                    
                    for i in step...6 {errorsDetected.append(errorArr[i])}
                    
                    print(errorsDetected)
                    
                }
                else {print(errorsDetected)}
