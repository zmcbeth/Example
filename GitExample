                let stringData = try String(contentsOf: pathway, encoding: .utf8) //Convert a textfile into a string
                
                var parserStack: String = "" //Keep track of individual parsed strings
                var stackAdded: Bool = false //Only allow one stack addition per character-loop
                var parserCollection: [String] = []//Keep track of the collection of parsed strings
                var step: Int = 0 //Keep track of the step
                var prevStep: Int = 0 //Keep track of the previous step
                var errorsDetected: [String] = [] //Keep track of detected errors for an item
                var errorDetected: Bool = false //Keep track of if an error occurs at some point
                
                //Initialize a chronological list of possible errors
                
                let errorArr: [String] = ["Expecting a non-void name",//-------------------------| 0 |
                                          "Expecting an opening bracket before type",//----------| 1 |
                                          "Expecting a non-void type",//-------------------------| 2 |
                                          "Expecting a closing bracket after type",//------------| 3 |
                                          "Expecting an opening curly-bracket before portmap",//-| 4 |
                                          "Expecting a non-void portmap",//----------------------| 5 |
                                          "Expecting a closing curly-bracket after portmap"]//---| 6 |
                
                //Expanded list and step order within body to extend the parser
                
                for char in stringData { //Loop through each character in the converted textfile
                    
                    stackAdded = false //Reset check to allow stack to be added to again
                    
                    while true { //Create an internal loop that will only break if "break" is run
                        
                        //If the character is whitespace, break
                        
                        if char == " "       {break}
                        else if char == "\t" {break}
                        else if char == "\n" {break}
                        
                        //Update the previous step to the current step
                        
                        prevStep = step
                        
                        //Check if the character is a square or curly bracket type:
                        
                            //If it is: Push stack to collection and clear stack (if the bracket comes before an alphabetic string)
                            //          Increment step if expecting that specific bracket
                        
                            //If it isn't: Add to the parser stack
                            //             Increment step if expecting an alphabetic character
                            //             Revert prevStep if the previous character was also alphabetic
                        
                        //If the character ends the entire item, increment out of bounds and break
                        
                        if char == "[" {
                            
                            parserCollection.append(parserStack)
                            
                            parserStack = ""
                            
                            if step == 1 {step += 1}
                            
                        }
                        else if char == "]" {
                            
                            if step == 3 {step += 1}
                            
                        }
                        else if char == "{" {
                            
                            parserCollection.append(parserStack)
                            
                            parserStack = ""
                            
                            if step == 4 {step += 1}
                            
                        }
                        else if char == "}" {
                            
                            parserCollection.append(parserStack)
                            
                            parserStack = ""
                            
                            if step == 6 {step += 1; break}
                            
                        }
                        else {
                            
                            if step == 0      {step += 1}
                            else if step == 2 {step += 1}
                            else if step == 5 {step += 1}
                            
                            if step == 1      {prevStep -= 1}
                            else if step == 3 {prevStep -= 1}
                            else if step == 6 {prevStep -= 1}
                            
                            if !stackAdded {parserStack += "\(char)"}
                            
                            stackAdded = true
                            
                        }
                        
                        //If the step overflows possible errors, start a new item
                        //If the step didn't change, the step is incorrect
                        //Continue internal loop -- while adding errors -- until back on track, then break
                        
                        if step == errorArr.count {step = 0; print(errorsDetected); errorsDetected = []}
                        else if step == prevStep {errorsDetected.append(errorArr[step]); errorDetected = true; step += 1}
                        else {break}
                        
                    }
                    
                    //Continue to next character
                    
                }
                
                //Check to see what step the string exited on
                //Add all remaining errors for the item if the item is incomplete
                
                if step != errorArr.count {
                    
                    for i in step..<errorArr.count {errorsDetected.append(errorArr[i])}
                    errorDetected = true
                    
                }
                
                //Print errors
                //Print parsed strings or if error occurred
                
                print(errorsDetected)
                
                if !errorDetected{print(parserCollection)}
                else {print("Compile error detected")}
